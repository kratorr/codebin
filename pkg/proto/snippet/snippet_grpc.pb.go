// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: snippet.proto

package snippet

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SnippetV1_Create_FullMethodName     = "/SnippetV1/Create"
	SnippetV1_Delete_FullMethodName     = "/SnippetV1/Delete"
	SnippetV1_ReadLatest_FullMethodName = "/SnippetV1/ReadLatest"
	SnippetV1_List_FullMethodName       = "/SnippetV1/List"
)

// SnippetV1Client is the client API for SnippetV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnippetV1Client interface {
	Create(ctx context.Context, in *CreateSnippetRequest, opts ...grpc.CallOption) (*CreateSnippetResponse, error)
	Delete(ctx context.Context, in *DeleteSnippetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadLatest(ctx context.Context, in *ReadLatestRequest, opts ...grpc.CallOption) (*ReadLatestResponse, error)
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListSnippetResponse, error)
}

type snippetV1Client struct {
	cc grpc.ClientConnInterface
}

func NewSnippetV1Client(cc grpc.ClientConnInterface) SnippetV1Client {
	return &snippetV1Client{cc}
}

func (c *snippetV1Client) Create(ctx context.Context, in *CreateSnippetRequest, opts ...grpc.CallOption) (*CreateSnippetResponse, error) {
	out := new(CreateSnippetResponse)
	err := c.cc.Invoke(ctx, SnippetV1_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snippetV1Client) Delete(ctx context.Context, in *DeleteSnippetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SnippetV1_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snippetV1Client) ReadLatest(ctx context.Context, in *ReadLatestRequest, opts ...grpc.CallOption) (*ReadLatestResponse, error) {
	out := new(ReadLatestResponse)
	err := c.cc.Invoke(ctx, SnippetV1_ReadLatest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snippetV1Client) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListSnippetResponse, error) {
	out := new(ListSnippetResponse)
	err := c.cc.Invoke(ctx, SnippetV1_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnippetV1Server is the server API for SnippetV1 service.
// All implementations must embed UnimplementedSnippetV1Server
// for forward compatibility
type SnippetV1Server interface {
	Create(context.Context, *CreateSnippetRequest) (*CreateSnippetResponse, error)
	Delete(context.Context, *DeleteSnippetRequest) (*emptypb.Empty, error)
	ReadLatest(context.Context, *ReadLatestRequest) (*ReadLatestResponse, error)
	List(context.Context, *emptypb.Empty) (*ListSnippetResponse, error)
	mustEmbedUnimplementedSnippetV1Server()
}

// UnimplementedSnippetV1Server must be embedded to have forward compatible implementations.
type UnimplementedSnippetV1Server struct {
}

func (UnimplementedSnippetV1Server) Create(context.Context, *CreateSnippetRequest) (*CreateSnippetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSnippetV1Server) Delete(context.Context, *DeleteSnippetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSnippetV1Server) ReadLatest(context.Context, *ReadLatestRequest) (*ReadLatestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadLatest not implemented")
}
func (UnimplementedSnippetV1Server) List(context.Context, *emptypb.Empty) (*ListSnippetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSnippetV1Server) mustEmbedUnimplementedSnippetV1Server() {}

// UnsafeSnippetV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnippetV1Server will
// result in compilation errors.
type UnsafeSnippetV1Server interface {
	mustEmbedUnimplementedSnippetV1Server()
}

func RegisterSnippetV1Server(s grpc.ServiceRegistrar, srv SnippetV1Server) {
	s.RegisterService(&SnippetV1_ServiceDesc, srv)
}

func _SnippetV1_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnippetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnippetV1Server).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnippetV1_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnippetV1Server).Create(ctx, req.(*CreateSnippetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnippetV1_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSnippetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnippetV1Server).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnippetV1_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnippetV1Server).Delete(ctx, req.(*DeleteSnippetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnippetV1_ReadLatest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadLatestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnippetV1Server).ReadLatest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnippetV1_ReadLatest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnippetV1Server).ReadLatest(ctx, req.(*ReadLatestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnippetV1_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnippetV1Server).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnippetV1_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnippetV1Server).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SnippetV1_ServiceDesc is the grpc.ServiceDesc for SnippetV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnippetV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SnippetV1",
	HandlerType: (*SnippetV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SnippetV1_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SnippetV1_Delete_Handler,
		},
		{
			MethodName: "ReadLatest",
			Handler:    _SnippetV1_ReadLatest_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SnippetV1_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "snippet.proto",
}
